
#include "types.h"
#include "drawer.h"
#include "cursor.h"
#include "vector2d.h"
#include "color.h"




char font_table_maj[36][64]=
		{
			{ // A
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
				0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00
			},
			{ // B
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
			},
			{ // C
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00
			},
			{ // D
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
			},
			{ // E
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00
			},
			{ // F
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			},

			{ // G
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
			},
			{ // H
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00
			},
			{ // I
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00
			},
			{ // J
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00
			},
			{ // K
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00
			},
			{ // L
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00
			},
			{ // M
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF,
				0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
				0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
				0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF
			},
			{ // N
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00
			},
			{ // O
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x00
			},
			{ // P
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			},
			{ // Q
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF
			},
			{ // R
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00
			},
			{ // S
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
			},
			{ // T
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00
			},
			{ // U
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
			},
			{ // V
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
				0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00
			},
			{ // W
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
				0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
				0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00
			},
			{ // X
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF
			},
			{ // Y
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00
			},
			{ // Z
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
				0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00
			},
			{ // 0
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
		  },
		  { // 1
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
		  },
		  { // 2
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
		  },
		  { // 3
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
		  },
		  { // 4
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00
		  },
		  { // 5
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00
		  },
		  { // 6
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
		  },
		  { // 7
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00
		  },
		  { // 8
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
		  },
		  { // 9
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
			0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
		  }
		};


// Private : Singleton
Drawer::Drawer()
{

}

void Drawer::setScreenResolution(int xres, int yres)
{
	XResolution = xres;
	YResolution = yres;

	cursor.setLimits(xres/CHAR_WIDTH, yres/CHAR_HEIGHT-1);
}


void Drawer::setDrawPixelPrimitive(void (*dP)(u16, u16, u8, u8, u8))
{
	drawPxl = dP;
	cursor.setPosition(0,0);
}


void Drawer::drawPixel(int x, int y, char red, char green, char blue)
{
	Drawer::drawPxl((u16)x, (u16)y, (u8)red, (u8)green, (u8)blue);
}

void Drawer::drawPixel(const Vector2D<int> &v, const Color& c)
{
	Drawer::drawPxl((u16)v.getX(), (u16)v.getY(), (u8)c.getRed(), (u8)c.getGreen(), (u8)c.getBlue());
}

void Drawer::clearScreen()
{
	for(int x=0; x<XResolution; x++)
	{
		for(int y=0; y<YResolution; y++)
		{
			drawPxl(x, y, 0, 0, 0);
		}
	}
}



void Drawer::drawLine(const Vector2D<int> &v1, const Vector2D<int> &v2, const Color& c)
{
	u8 red = c.getRed(), green = c.getGreen(), blue=c.getBlue();
	int x1 = v1.getX(), x2=v2.getX(), y1=v1.getY(), y2=v2.getY();
	if(x1 == x2)
	{
		if(y1 > y2)
		{
			int temp = y1;
			y1 = y2;
			y2 = temp;
		}
		int diff = y2-y1;
		for(int i=0; i<diff; i++)
		{
			Drawer::drawPxl((u16)x1, (u16)y1+i, red, green, blue);
		}
	}
	else if(y1 == y2)
	{
		if(x1 > x2)
		{
			int temp = x1;
			x1 = x2;
			x2 = temp;
		}
		int diff = x2-x1;
		for(int i=0; i<diff; i++)
		{
			Drawer::drawPxl((u16)x1+i, (u16)y1, red, green, blue);
		}
	}
	else
	{
		float delta = (float)(y2-y1)/(float)(x2-x1);
		float diff;
		if(delta <=1)
		{
			const float b = y1 - delta*x1;
			float yn=y1;
			diff = (x1 < x2)? 1.0 : -1.0;
			for(float xn=x1; xn!=x2; xn+=diff)
			{
				//const float y = delta*xn+b
				yn = delta * xn + b;
				yn = ((float)((int)yn - (float)yn) >= 0.5 )? yn+1: yn;

				Drawer::drawPxl((u16)xn, (u16)yn, red, green, blue);
			}
		}
		else
		{
			delta = (float)(x2-x1)/(float)(y2-y1);
			const float b = x1 - delta*y1;
			float xn=x1;
			diff = (y1 < y2)? 1.0 : -1.0;
			for(float yn=y1; yn!=y2; yn+=diff)
			{
				//const float y = delta*xn+b
				xn = delta * yn + b;
				xn = ((float)((int)xn - (float)xn) >= 0.5 )? xn+1: xn;

				Drawer::drawPxl((u16)xn, (u16)yn, red, green, blue);
			}
		}
	}
}


void Drawer::drawRectangle(const Vector2D<int> &v1, const Vector2D<int> &v2, const Color& c)
{
	int x1 = v1.getX(), x2=v2.getX(), y1=v1.getY(), y2=v2.getY();

	Vector2D<int> v3(x2,y1), v4(x1, y2);
	drawLine(v1, v3, c);
	drawLine(v3, v2, c);
	drawLine(v2, v4, c);
	drawLine(v4, v1, c);
}


void Drawer::putChar(u16 x, u16 y, u8 car)
{
	//u8 *video = RAMVIDEO_ADDRESS + (y * XResolution + x)*bytesPerPixel;
	u8 num_alphabet;

	if('a'<=car && 'z'>=car)
		num_alphabet = car-'a';
	else if('A'<=car && 'Z'>=car)
		num_alphabet = car-'A';
	else if(car >= '0' && car <='9')
	{
		num_alphabet = 26 + (car-'0');
	}
	else
		return;
	//else if(car == ' ')


	//u16 attr = (red & 0x1F) << 11 | (green & 0x3F) << 5 | (blue & 0x1F);
	for(int _y=0; _y<8; _y++)
	{
		for(int _x=0; _x<8; _x++)
		{
			const u8 off = _y*8+_x;
			u8 attr = font_table_maj[num_alphabet][off];
			if(attr != 0)
				drawPxl(x+_x, y+_y, attr, attr, attr);
		}
	}
}

void  Drawer::putChar(u8 car)
{
	switch(car)
	{
	case ' ':
		cursor++;
	break;
	case '\n':
		cursor.endLine();
	break;
	default:
		putChar(cursor.getX()*9 , cursor.getY()*9, car);
		cursor++;
	break;
	}

	return;
}



void Drawer::print(u16 x, u16 y, const String& str)
{
	char *data = str.data();
	u16 _x=x, _y=y;
	while(*data!= '\0')
	{
		if(*data == ' ')
		{
			_x+=9;
		}
		else if(*data == '\n')
		{
			_y+= 9;
			_x = x;
		}
		else
		{
			putChar(_x, _y, *data);
			_x+=9;
		}
		data++;
	}
}

void Drawer::print(const String &str)
{
	char *data = str.data();
	while(*data != '\0')
	{
		putChar(*data);
		data++;
	}
}
